<!DOCTYPE HTML>
<html lang="en">
    <head>
        <title>A daydream for libby</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width,initial-scale=1"/>
        <meta name="description" content="A daydream for libby"/>
        <meta property="og:site_name" content="A daydream for libby"/>
        <meta property="og:title" content="A daydream for libby"/>
        <meta property="og:type" content="website"/>
        <meta property="og:description" content="A daydream for libby"/>
        <meta property="og:image" content="https://adaydreamforlibby.carrd.co/assets/images/share.jpg?v=8116666d"/>
        <meta property="og:image:type" content="image/jpeg"/>
        <meta property="og:image:width" content="1108"/>
        <meta property="og:image:height" content="884"/>
        <meta property="og:url" content="https://adaydreamforlibby.carrd.co"/>
        <meta property="twitter:card" content="summary_large_image"/>
        <link rel="canonical" href="https://adaydreamforlibby.carrd.co"/>
        <link href="https://fonts.googleapis.com/css?display=swap&family=Open+Sans:300,300italic" rel="stylesheet" type="text/css"/>
        <link rel="icon" type="image/png" href="assets/images/favicon.png?v=8116666d"/>
        <link rel="apple-touch-icon" href="assets/images/apple-touch-icon.png?v=8116666d"/>
        <style>
            html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video {
                margin: 0;
                padding: 0;
                border: 0;
                font-size: 100%;
                font: inherit;
                vertical-align: baseline;
            }

            article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section {
                display: block;
            }

            body {
                line-height: 1;
            }

            ol,ul {
                list-style: none;
            }

            blockquote,q {
                quotes: none;
            }

            blockquote:before,blockquote:after,q:before,q:after {
                content: '';
                content: none;
            }

            table {
                border-collapse: collapse;
                border-spacing: 0;
            }

            body {
                -webkit-text-size-adjust: none
            }

            mark {
                background-color: transparent;
                color: inherit
            }

            input::-moz-focus-inner {
                border: 0;
                padding: 0
            }

            input[type="text"],input[type="email"],select,textarea {
                -moz-appearance: none;
                -webkit-appearance: none;
                -ms-appearance: none;
                appearance: none
            }

            *, *:before, *:after {
                box-sizing: border-box;
            }

            body {
                line-height: 1.0;
                min-height: var(--viewport-height);
                min-width: 320px;
                overflow-x: hidden;
                word-wrap: break-word;
                background-color: #EDEDED;
            }

            :root {
                --background-height: 100vh;
                --site-language-alignment: left;
                --site-language-direction: ltr;
                --site-language-flex-alignment: flex-start;
                --site-language-indent-left: 1;
                --site-language-indent-right: 0;
                --viewport-height: 100vh;
            }

            html {
                font-size: 18pt;
            }

            u {
                text-decoration: underline;
            }

            strong {
                color: inherit;
                font-weight: bolder;
            }

            em {
                font-style: italic;
            }

            code {
                background-color: rgba(144,144,144,0.25);
                border-radius: 0.25em;
                font-family: 'Lucida Console', 'Courier New', monospace;
                font-size: 0.9em;
                font-weight: normal;
                letter-spacing: 0;
                margin: 0 0.25em;
                padding: 0.25em 0.5em;
                text-indent: 0;
            }

            mark {
                background-color: rgba(144,144,144,0.25);
            }

            s {
                text-decoration: line-through;
            }

            sub {
                font-size: smaller;
                vertical-align: sub;
            }

            sup {
                font-size: smaller;
                vertical-align: super;
            }

            a {
                color: inherit;
                text-decoration: underline;
                transition: color 0.25s ease;
            }

            #wrapper {
                -webkit-overflow-scrolling: touch;
                align-items: center;
                display: flex;
                flex-direction: column;
                justify-content: center;
                min-height: var(--viewport-height);
                overflow: hidden;
                position: relative;
                z-index: 2;
            }

            #main {
                --alignment: center;
                --flex-alignment: center;
                --indent-left: 1;
                --indent-right: 1;
                --border-radius-tl: 0;
                --border-radius-tr: 0;
                --border-radius-br: 0;
                --border-radius-bl: 0;
                align-items: center;
                display: flex;
                flex-grow: 0;
                flex-shrink: 0;
                justify-content: center;
                max-width: 100%;
                position: relative;
                text-align: var(--alignment);
                z-index: 1;
            }

            #main > .inner {
                --padding-horizontal: 0rem;
                --padding-vertical: 2.25rem;
                --spacing: 0.75rem;
                --width: 100vw;
                border-radius: var(--border-radius-tl) var(--border-radius-tr) var(--border-radius-br) var(--border-radius-bl);
                max-width: 100%;
                position: relative;
                width: var(--width);
                z-index: 1;
                padding: var(--padding-vertical) var(--padding-horizontal);
            }

            #main > .inner > * {
                margin-top: var(--spacing);
                margin-bottom: var(--spacing);
            }

            #main > .inner > :first-child {
                margin-top: 0 !important;
            }

            #main > .inner > :last-child {
                margin-bottom: 0 !important;
            }

            #main > .inner > .full {
                margin-left: calc(var(--padding-horizontal) * -1);
                max-width: calc(100% + calc(var(--padding-horizontal) * 2) + 0.4725px);
                width: calc(100% + calc(var(--padding-horizontal) * 2) + 0.4725px);
            }

            #main > .inner > .full:first-child {
                border-top-left-radius: inherit;
                border-top-right-radius: inherit;
                margin-top: calc(var(--padding-vertical) * -1) !important;
            }

            #main > .inner > .full:last-child {
                border-bottom-left-radius: inherit;
                border-bottom-right-radius: inherit;
                margin-bottom: calc(var(--padding-vertical) * -1) !important;
            }

            #main > .inner > .full.screen {
                border-radius: 0 !important;
                max-width: 100vw;
                position: relative;
                width: 100vw;
                left: 50%;
                margin-left: -50vw;
                right: auto;
            }

            body.is-instant #main, body.is-instant #main > .inner > *,body.is-instant #main > .inner > section > * {
                transition: none !important;
            }

            body.is-instant:after {
                display: none !important;
                transition: none !important;
            }

            h1, h2, h3, p {
                direction: var(--site-language-direction);
                position: relative;
            }

            h1 span.p, h2 span.p, h3 span.p, p span.p {
                display: block;
                position: relative;
            }

            h1 span[style], h2 span[style], h3 span[style], p span[style], h1 strong, h2 strong, h3 strong, p strong, h1 a, h2 a, h3 a, p a, h1 code, h2 code, h3 code, p code, h1 mark, h2 mark, h3 mark, p mark {
                -webkit-text-fill-color: currentcolor;
            }

            #text02 {
                color: #827A7A;
                font-family: 'Open Sans', sans-serif;
                font-size: 0.75em;
                line-height: 1.5;
                font-weight: 300;
            }

            #text02 a {
                text-decoration: underline;
            }

            #text02 a:hover {
                text-decoration: none;
            }

            #text02 span.p:nth-child(n + 2) {
                margin-top: 1rem;
            }

            #text01 {
                color: #827A7A;
                font-family: 'Open Sans', sans-serif;
                font-size: 0.5em;
                line-height: 1.5;
                font-weight: 300;
            }

            #text01 a {
                text-decoration: underline;
            }

            #text01 a:hover {
                text-decoration: none;
            }

            #text01 span.p:nth-child(n + 2) {
                margin-top: 1rem;
            }

            @media (max-width: 1920px) {
            }

            @media (max-width: 1680px) {
                html {
                    font-size: 13pt;
                }
            }

            @media (max-width: 1280px) {
                html {
                    font-size: 13pt;
                }
            }

            @media (max-width: 1024px) {
            }

            @media (max-width: 980px) {
                html {
                    font-size: 11pt;
                }
            }

            @media (max-width: 736px) {
                html {
                    font-size: 11pt;
                }

                #main > .inner {
                    --padding-horizontal: 0rem;
                    --padding-vertical: 2.25rem;
                    --spacing: 0.75rem;
                }

                #text02 {
                    letter-spacing: 0rem;
                    width: 100%;
                    font-size: 0.75em;
                    line-height: 1.5;
                }

                #text01 {
                    letter-spacing: 0rem;
                    width: 100%;
                    font-size: 0.5em;
                    line-height: 1.5;
                }
            }

            @media (max-width: 480px) {
                #main > .inner {
                    --spacing: 0.65625rem;
                }
            }

            @media (max-width: 360px) {
                #main > .inner {
                    --padding-horizontal: 0rem;
                    --padding-vertical: 1.6875rem;
                    --spacing: 0.5625rem;
                }

                #text02 {
                    font-size: 0.75em;
                }

                #text01 {
                    font-size: 0.5em;
                }
            }
        </style>
    </head>
    <body>
        <div id="wrapper">
            <div id="main">
                <div class="inner">
                    <h1 id="text02">Click anywhere to generate a new fairy tale; press &#039;s &#039;to save; press &#039;a &#039;to switch to a responsive size. You might need to scroll down to see full image.</h1>
                    <div id="embed03">
                        <html>
                            <head>
                                <title>Castle Test</title>
                                <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.js"></script>
                                <script>
                                    let palettes = [["#154255", "antiquewhite", "#f3bc17", "antiquewhite", "#dcdcdc", "#c0504f", "#68b9b0", "antiquewhite", "#2763ab", "antiquewhite"], ["antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite", "antiquewhite"], ["antiquewhite", "#9dcee2", "#f29479", "antiquewhite", "#f29479", "antiquewhite", "#edf6f9", "antiquewhite", "#9dcee2", "antiquewhite"], ["#dfde80", "antiquewhite", "#8c6677", "#ad7787", "antiquewhite", "antiquewhite", "antiquewhite", "#f078b3", "#ec8782", "#dfde80"], ["#dad7cd", "antiquewhite", "#588157", "#3a5a40", "#a3b18a", "antiquewhite", "#dad7cd", "#FF9D47", "#3a5a40", "antiquewhite"], ["#ff9483", "#fca986", "#f8bd88", "#f0e68c", "#f4eda9", "#f8f3c6", "#ffffff", "#ffe286", "#ffd349", "#ffc40c"], ["#ff0a54", "#ff477e", "#ff5c8a", "#ff7096", "#f7cad0", "#ff85a1", "#ff99ac", "#fbb1bd", "#f9bec7", "#fae0e4"], ["#71093b", "#990b52", "#cb8b15", "#eaaa34", "#f1f4f9", "#ffffff", "#749ed2", "#467ec3", "#023578", "#022450"]]
                                      , nounarray = [["Cats and Dogs", "Glass and Fire", "Water and Wood", "Micefolly", "Pirates", "Small Children", "Brothers", "Sisters", "Dragons", "Flowers", "Watchfyre", "Pines", "Fernwater", "Stonepeak", "Maplegully", "Anglemoss", "Processing", "Doodlebrook", "Windshakes"]]
                                      , verbarray = [["their mechanical poetry that could be heard for miles", "their farming and it was said they could dance with the rain", "their jumping and it was thought that they could reach the moon", "their ability to befriend squirrels", "their greetings, which consisted of precisely 17 kisses", "the ability to drink 7 gallons of water in one sitting", "competitive, militant singing", "their ability to grow ideas like others grew flowers", "excessive yet fashionable thrifting", "studying the secret life of clouds", "their whispering, which was said to be louder than a thunderclap", "their epic poems which were said to come true if recited 3 times", "grand and fanciful celebrations", "their lies and outsiders would travel for miles to buy one", "their clothing which was made of the rarest of clouds", "their once-a-century hunt, conducted on the back of eagles", "candy-like breath and body odor", "their miraculous healing abilities", "their charitable and miracle-making jokes"]]
                                      , epocharray = [["The Kingdom is young. So young it could almost be said that it does not yet exist. Look closely and you'll see it being built right now.", "Do you hear that? The sound of hammering, sawing, and singing. The Kingdom is being built as we speak and you can see the towers growing.", "A small and ambitious start, but a start nonetheless. The people are happy and hopeful for what is to come. The building begins."], ["The Kingdom has just come of age. It is a happy and peaceful time. There are few worries and the people live an idyllic life.", "The Kingdom has grown and is thriving. They build cities and castles that reach for the sky and each day brings something new.", "The people build towards the sky and some whisper of Babel in the shadows. No one knows what is to come, but times are good."], ["The Kingdom is at the height of it's power. All it can think of is growth and change and more, more, more. The people know no limits.", "The Kingdom soars as innovation and progress compound. Not even the mountains can hold it back and every day yields discovery.", "They can see farther than ever before - a few can even see you, watching them watching you."], ["The Kingdom is old. Little remains but the now anachronistic relics of a bygone era. A small provincial town sprouts and life is slow.", "The Kingdom is fading. Yet sometimes endings can be just as hopeful as beginnings. A new people may rise from their ruins.", "There was once an ancient people that also set it's borders and bridges right here. The borders fell and the river dried up. Some still remain."], ["The Kingdom is long gone and exists only as a model on a raised platform in a small museum. People glance as they walk by. Few stop.", "The Kingdom is gone but not forgotten. It survives as a model on the table of a curious young child in a small town.", "Fairy tales are not true, but that does not make them unhelpful. No kingdom has existed quite like this model, and yet..."]]
                                      , livepalarray = [["loved their bright colors and named their children 'Yellow', 'Blue', and 'Green'", "believed that the colors Blue and Yellow were lovers, forever waiting to be reunited"], ["avoided even the thought of color and painted their homes with sand", "thought the brightest color was no color at all"], ["loved soft colors and the occaisonal red and blue", "had an average resting heart rate of 45 and taught that soft colors brought contentment"], ["dreamed in technicolor pink and yellow", "knew just three words: 'pink', 'yellow', and 'more'"], ["painted with the color of the forests and spoke with trees", "sung to their homes and grew them like trees"], ["painted with all the shades of the sun from dusk to dawn", "made a deal with the sun and painted their homes in its colors as tribute"], ["dyed their food and water red before every meal", "would trade 1,000 sheep for just one new shade of red"], ["refused to acknowledge any season but Fall", "saved all celebrations until the season of the falling leaves"]];
                                    hash = 1
                                    function setup() {
                                        var canvas = createCanvas(600, 750);
                                        canvas.parent('canvasForHTML');
                                        randomSeed(random(99999)),
                                        noiseSeed(random(99999)),
                                        noLoop(),
                                        pixelDensity(5),
                                        colorMode(HSL, 360, 100, 100, 100),
                                        hbirds = hash * random([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5, 20, 25, 2, 3]),
                                        hbiginnercastles = hash * random([4, 1, 2, 3, 1, 25, 10]),
                                        hinnercastles = hash * random([10, 1, 5, 25, 2, 3, 2, 4]),
                                        hrtree = hash * random([5, 6, 7, 8, 9, 10, 25, 20, 15, 30, 22]),
                                        hltree = hash * random([5, 6, 7, 9, 10, 25, 20, 15, 30, 22]),
                                        hcloud = hash * random([5, 10, 15, 25])
                                    }
                                    function setup2() {
                                        var canvas = createCanvas(windowWidth - 5, windowHeight);
                                        canvas.parent('canvasForHTML');
                                        randomSeed(random(99999)),
                                        noiseSeed(random(99999)),
                                        noLoop(),
                                        pixelDensity(5),
                                        colorMode(HSL, 360, 100, 100, 100),
                                        hbirds = hash * random([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5, 20, 25, 2, 3]),
                                        hbiginnercastles = hash * random([4, 1, 2, 3, 1, 25, 10]),
                                        hinnercastles = hash * random([10, 1, 5, 25, 2, 3, 2, 4]),
                                        hrtree = hash * random([5, 6, 7, 8, 9, 10, 25, 20, 15, 30, 22]),
                                        hltree = hash * random([5, 6, 7, 9, 10, 25, 20, 15, 30, 22]),
                                        hcloud = hash * random([5, 10, 15, 25])
                                    }
                                    function keyPressed() {
                                        if (key == "s") {
                                            saveCanvas("castle", "png");
                                        } else if (key == "a") {
                                            clear()
                                            setup2()
                                            redraw()
                                        }
                                    }

                                    function mousePressed() {
                                        clear()
                                        setup()
                                        redraw()
                                    }
                                </script>
                            </head>
                            <body>
                                <div id="canvasForHTML"></div>
                            </body>
                        </html>
                    </div>
                    <div id="embed04">
                        <script>
                            function drawWoodenTower(e, t) {
                                for (towerbasewidth = 5,
                                towerbaseslope = 0,
                                linemargin = 1.5,
                                scaffoldingystart = e / 5,
                                scaffoldingyend = e / 5,
                                platformwidth = 10,
                                platformheight = -10,
                                platslope = 1,
                                platcoverwidth = 8,
                                platcoverheight = 10,
                                plattowerheight = -5,
                                plattowerextrawidth = 5,
                                platcoverpresent = 0,
                                platcovertowertoppresent = 0,
                                flagpoleheight = -55,
                                flagwidth = 3,
                                flagheight = -10,
                                push(),
                                line(-towerbaseslope, 0, 0, e),
                                line(towerbasewidth, 0, towerbasewidth - towerbaseslope, e),
                                line(-towerbaseslope - linemargin, 0, -linemargin, e),
                                line(towerbasewidth + linemargin, 0, towerbasewidth - towerbaseslope + linemargin, e),
                                line(-towerbaseslope, scaffoldingystart, towerbasewidth - towerbaseslope, e - scaffoldingyend),
                                line(towerbasewidth - towerbaseslope, scaffoldingyend, -towerbaseslope, e - scaffoldingystart),
                                pop(),
                                push(),
                                fill("antiquewhite"),
                                translate(towerbasewidth / 2, e),
                                push(),
                                translate(random([platformwidth / 2, -platformwidth / 2]), 1.5 * platformheight),
                                drawPerson(3, 1),
                                pop(),
                                beginShape(),
                                vertex(-platformwidth, 0),
                                vertex(platformwidth, 0),
                                vertex(platformwidth + platslope, platformheight),
                                vertex(-platformwidth - platslope, platformheight),
                                vertex(-platformwidth, 0),
                                endShape(),
                                a = 0; a < platslope / 2 + 2 * platformwidth; a += 4)
                                    line(-platformwidth + a, 0, -platformwidth + a, platformheight);
                                line(0, platformheight, 0, platformheight + flagpoleheight),
                                flagtype = 1,
                                1 == flagtype && (push(),
                                rectMode(CENTER),
                                colorset = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                fill(palettes[t][colorset]),
                                rect(random([-1, 1]) * flagwidth / 2, platformheight + flagpoleheight, flagwidth, flagheight),
                                pop()),
                                0 == platcoverpresent || (beginShape(),
                                vertex(platformwidth + platslope - platcoverwidth, platformheight),
                                vertex(-platformwidth - platslope + platcoverwidth, platformheight),
                                vertex(-platformwidth - platslope + platcoverwidth, platformheight - platcoverheight),
                                vertex(platformwidth + platslope - platcoverwidth, platformheight - platcoverheight),
                                vertex(platformwidth + platslope - platcoverwidth, platformheight),
                                endShape(),
                                0 == platcovertowertoppresent || triangle(-platformwidth - platslope + platcoverwidth - plattowerextrawidth, platformheight - platcoverheight, 0, platformheight - platcoverheight + plattowerheight, platformwidth + platslope - platcoverwidth + plattowerextrawidth, platformheight - platcoverheight)),
                                pop()
                            }
                            function drawArchTower(e, t, r, i) {
                                brbeight = e / 1.5,
                                braddheight = brbeight + brbeight / i,
                                toptheight = e / 2,
                                topmodifier = 2,
                                totopheight = -45,
                                push();
                                let o = 2;
                                for (; o--; )
                                    x = random(4, t + t - 4),
                                    y = e - 5,
                                    push(),
                                    translate(x, y),
                                    drawPerson(3, 3),
                                    pop();
                                for (pop(),
                                fill("black"),
                                triangle(-r - topmodifier, toptheight + e, -r / 2, totopheight + toptheight + e, topmodifier, toptheight + e),
                                triangle(t + t - topmodifier, toptheight + e, t + t + r / 2, totopheight + toptheight + e, t + t + r + topmodifier, toptheight + e),
                                fill("antiquewhite"),
                                beginShape(),
                                vertex(0, 0),
                                vertex(0, brbeight),
                                bezierVertex(0, braddheight, t / 2, braddheight, t, braddheight),
                                vertex(t, braddheight),
                                bezierVertex(t + t / 2, braddheight, t + t, braddheight, t + t, brbeight),
                                vertex(t + t, brbeight),
                                vertex(t + t, 0),
                                vertex(t + t + r, 0),
                                vertex(t + t + r, e),
                                vertex(t + t + r, e + toptheight),
                                vertex(t + t, e + toptheight),
                                vertex(t + t, e),
                                vertex(0, e),
                                vertex(0, e + toptheight),
                                vertex(-r, e + toptheight),
                                vertex(-r, 0),
                                vertex(0, 0),
                                endShape(),
                                push(),
                                strokeWeight(10),
                                pop(),
                                stroke("black"),
                                strokeWeight(1),
                                a = 0; a < -e - toptheight; a += 2)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(0, -a, -random(.7, 1.5) * r / 2, -a),
                                    pop();
                                for (stroke("black"),
                                strokeWeight(1),
                                a = 0; a < -e - toptheight; a += 2)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(t + t + r, -a, t + t + r + -random(.7, 1.5) * r / 2, -a),
                                    pop()
                            }
                            function drawPerson(e, t) {
                                for (rheight = 2 * e,
                                neckgap = .8 * e,
                                headsize = e * random(.5, 1),
                                shadingdensity = e / 4,
                                spearheight = 4 * e,
                                spearxdist = .85 * e,
                                spearpointwidth = e / 5,
                                spearpointheight = .85 * e,
                                flagheight = e * random(6, 15),
                                flagxdist = .85 * e,
                                flagpointwidth = 2 * e,
                                flagpointheight = .85 * e,
                                push(),
                                fill("antiquewhite"),
                                rect(0, 0, e, rheight, random([0, 360]), random([0, 360]), random([0, 360]), random([0, 360])),
                                line(0, rheight, 0, 1.5 * rheight),
                                line(e, rheight, e, 1.5 * rheight),
                                circle(e / 2, -neckgap, headsize),
                                pop(),
                                1 == t ? (line(-spearxdist, -spearheight, -spearxdist, 1.5 * rheight),
                                fill("black"),
                                triangle(-spearxdist, -spearheight, -spearxdist + spearpointwidth, -spearheight + spearpointheight, -spearxdist - spearpointwidth, -spearheight + spearpointheight)) : 2 == t && (line(-flagxdist, -flagheight, -flagxdist, 1.5 * rheight),
                                fill(random(["#0e0e0e", "#f3bc17", "#d54b0c", "#154255", "#dcdcdc", "#c0504f", "#68b9b0", "#ecbe2c", "#2763ab", "#ce4241"])),
                                triangle(-flagxdist, -flagheight, -flagxdist, -flagheight + flagpointheight, -flagxdist + flagpointwidth, -flagheight + flagpointheight / 2)),
                                a = e / 2; a < rheight; a += shadingdensity)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(e, a, e / random(1.5, 2.5), a),
                                    pop()
                            }
                            function drawTower(e, t, r, i, o, h) {
                                for (towertopheight = r / 2.5,
                                push(),
                                fill("antiquewhite"),
                                colorset = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                fill(palettes[h][colorset]),
                                beginShape(),
                                vertex(0, 0),
                                vertex(t, -r),
                                vertex(e, -r),
                                vertex(e + t, 0),
                                endShape(),
                                a = 0; a < r; a += 2)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(e + t - map(a, 0, r, t, 0), a - r, random(.7, 1.5) * e / 2, a - r),
                                    pop();
                                if (fill("black"),
                                x = random(t, e / 1.1 - t),
                                y = random(-r / 2, -r / 1.1),
                                rect(x, y, e / random(13, 20), r / random(5, 15)),
                                1 == o)
                                    fill("black"),
                                    triangle(0 + i, -r, (e + t) / 2, -r - towertopheight, e + t - i, -r),
                                    flagpresent = random([0, 0, 0, 0, 1]),
                                    flagheight = random(r / 1.8),
                                    flagwidth = 7,
                                    flagtype = random([1, 2]),
                                    1 == flagpresent && (push(),
                                    colorset = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                    fill(palettes[h][colorset]),
                                    translate((e + t) / 2, -r - towertopheight),
                                    line(0, 0, 0, -flagheight),
                                    rectMode(CENTER),
                                    1 == flagtype ? rect(0, -flagheight, 3, 6) : triangle(0, -flagheight, flagwidth, -flagheight - 2, 0, -flagheight - 4),
                                    pop());
                                else if (2 == o) {
                                    for (towertopwidth = random(2, 7),
                                    towertopheight = random(1, 6),
                                    beginShape(),
                                    fill("antiquewhite"),
                                    fill(palettes[h][colorset]),
                                    vertex(t, -r),
                                    vertex(t - towertopwidth, -r - towertopheight),
                                    vertex(e + towertopwidth, -r - towertopheight),
                                    vertex(e, -r),
                                    endShape(),
                                    push(),
                                    fill("antiquewhite"),
                                    fill(palettes[h][colorset]),
                                    translate(-towertopwidth, -r - towertopheight),
                                    rampartwidth = random(2, 5),
                                    rampartheight = random(1, 3),
                                    wallwidth = e + 2 * towertopwidth,
                                    wallheight = 5,
                                    beginShape(),
                                    vertex(0, 0),
                                    vertex(0, -wallheight),
                                    vertex(rampartwidth, -wallheight),
                                    vertex(rampartwidth, -wallheight + rampartheight),
                                    vertex(2 * rampartwidth, -wallheight + rampartheight),
                                    a = 2; a < wallwidth / rampartwidth - 1; a += 2)
                                        vertex(rampartwidth * a, -wallheight),
                                        vertex(rampartwidth * (a + 1), -wallheight),
                                        vertex(rampartwidth * (a + 1), -wallheight + rampartheight),
                                        vertex(rampartwidth * (a + 2), -wallheight + rampartheight);
                                    vertex(wallwidth, -wallheight + rampartheight),
                                    vertex(wallwidth, 0),
                                    vertex(0, 0),
                                    endShape(),
                                    pop()
                                }
                                pop()
                            }
                            function drawWallBasic(e, t, r) {
                                for (push(),
                                parapetheight = 1,
                                wallslope = 0,
                                translate(-e / 2, -t - 2),
                                line(0, 0, e, 0 + wallslope),
                                line(0, parapetheight, e, parapetheight + wallslope),
                                a = 0; a < e; a += 5)
                                    line(a, 0 + map(a, 0, e, 0, wallslope), a, parapetheight + map(a, 0, e, 0, wallslope));
                                for (a = 0; a < e; a += r)
                                    drawingContext.setLineDash([random(25), random(3)]),
                                    line(a, parapetheight + map(a, 0, e, 0, wallslope) + 0, a, 2 * parapetheight + map(a, 0, e, 0, wallslope) + t);
                                line(0, parapetheight + t + parapetheight, e, parapetheight + wallslope + t + parapetheight),
                                pop()
                            }
                            function drawBird(e) {
                                let t = 5;
                                for (strokeWeight(1),
                                flowerstart = 0,
                                flowerend = e; t--; )
                                    fill(random(1, 25), random(99, 99), random(87, 90), 100),
                                    fill(random(100, 150), random(55, 55), random(75, 75), 100),
                                    noFill(),
                                    beginShape(),
                                    vertex(random(flowerstart, flowerstart), random(flowerstart, flowerstart)),
                                    bezierVertex(random(flowerstart, flowerend), random(flowerstart, flowerend), random(flowerstart, flowerend), random(flowerstart, flowerend), random(flowerend, flowerend), random(flowerend, flowerend)),
                                    endShape(CLOSE)
                            }
                            function drawAqueduct(e, t, r, i, o, h) {
                                for (brbeight = r / 1.5,
                                braddheight = brbeight + brbeight / 4,
                                toptheight = r / 2,
                                topmodifier = 4,
                                totopheight = -45,
                                1 == h ? (colorset = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                fill(palettes[i][colorset])) : fill(palettes[i][o]),
                                beginShape(),
                                vertex(0, 0),
                                vertex(0, brbeight),
                                bezierVertex(0, braddheight, t / 2, braddheight, t, braddheight),
                                vertex(t, braddheight),
                                bezierVertex(t + t / 2, braddheight, t + t, braddheight, t + t, brbeight),
                                vertex(t + t, brbeight),
                                vertex(t + t, 0),
                                vertex(t + t + e, 0),
                                vertex(t + t + e, r),
                                vertex(-e, r),
                                vertex(-e, 0),
                                vertex(0, 0),
                                endShape(),
                                stroke("black"),
                                strokeWeight(1),
                                a = 0; a < -r; a += 2)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(0, -a, -random(.7, 1.5) * e / 2, -a),
                                    pop();
                                for (stroke("black"),
                                strokeWeight(1),
                                a = 0; a < -r; a += 2)
                                    push(),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(t + t + e, -a, t + t + e + -random(.7, 1.5) * e / 2, -a),
                                    pop()
                            }
                            function drawTree(e) {
                                treewidth = e / 3,
                                treeshade = 2,
                                treeshadewidth = treewidth / 3.5,
                                trunkheight = e / 3,
                                fill("antiquewhite"),
                                rect(0, 0, treewidth, e, 360, 360, 5, 5),
                                line(treewidth / 2, 0, treewidth / 2, e),
                                push();
                                for (var t = 0; t <= e - 1; t += treeshade)
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(treewidth / 2, -t + e - 2, -treeshadewidth + treewidth / 2, -t + e);
                                for (var a = 0; a <= e - 1; a += treeshade)
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    line(treewidth / 2, -a + e - 2, treeshadewidth + treewidth / 2, -a + e);
                                pop(),
                                line(treewidth / 2, e, treewidth / 2, e + trunkheight)
                            }
                        </script>
                    </div>
                    <div id="embed01">
                        <script>
                            function draw() {
                                if (livepal = random([0, 1, 2, 3, 4, 5, 6, 7, 1]),
                                colororplain = random([1, 2, 1]),
                                1 == colororplain ? background(palettes[livepal][4]) : background("antiquewhite"),
                                texture = 1,
                                peakleft = random([0, 0, 0, 300]),
                                frame = random([0, 50, 75, 0]),
                                ground = 600,
                                incr = random([0, .002, .009, .01]),
                                xfreqofpeak = random([5, 10, 2.5, 3, 3, 2, 2, 15]),
                                flatgroundleft = random([0, 100, 200, 50, 0]),
                                200 == flatgroundleft ? flatgroundright = random([0, 100, 50]) : flatgroundright = random([0, 100, 200, 50, 0]),
                                peakheight = random([0, 25, 100, 150]),
                                peakleft > 0 ? additionalframe = 2 : 1 == livepal ? additionalframe = 1 : additionalframe = 2,
                                1 == additionalframe && (push(),
                                beginShape(),
                                stroke("black"),
                                fill(random(["#f29479", "#9dcee2", "#f4eda9", "#a3b18a", "white"])),
                                strokeWeight(1),
                                n = noise(frame * incr, ground),
                                tallestpointofframe = random([25, 50, 100, 100, 100]),
                                vertex(frame, ground + peakheight),
                                peakleft > 0 && vertex(frame, ground + peakheight - peakleft),
                                bezierVertex(frame + 10, 200, frame + 100, 100, width / 2, tallestpointofframe),
                                vertex(width / 2, tallestpointofframe),
                                bezierVertex(width - 100, 100, width - 10, 200, width - frame, ground),
                                vertex(width - frame, ground + peakheight),
                                endShape(),
                                pop()),
                                cloudpresent = random([1, 2, 2, 2, 2]),
                                1 == cloudpresent) {
                                    let e = hcloud;
                                    for (; e--; ) {
                                        for (push(),
                                        stroke("black"),
                                        ground2 = 200,
                                        peakheight2 = random(3, 8),
                                        xfreqofpeak2 = 2,
                                        frame2 = 200,
                                        incr2 = .1,
                                        bottomofcloud = peakheight2,
                                        cloudstart = 0,
                                        cloudwidth = random([25, 50, 75, 100, 150]),
                                        push(),
                                        x = random(-35, width - 25),
                                        y = random(-175, 200),
                                        translate(x, y),
                                        b = ground2; b < ground2 + 5; b += 5) {
                                            for (fill("antiquewhite"),
                                            beginShape(),
                                            a = cloudstart; a < cloudwidth; a += xfreqofpeak2)
                                                n = noise(a * incr2, ground2),
                                                curveVertex(a, map(n, 0, 1, b - peakheight2, b + peakheight2));
                                            curveVertex(cloudwidth, ground2 + bottomofcloud),
                                            curveVertex(cloudstart, ground2 + bottomofcloud),
                                            endShape(CLOSE)
                                        }
                                        for (a = cloudstart; a < cloudwidth; a += xfreqofpeak2)
                                            n = noise(a * incr2, ground2),
                                            drawingContext.setLineDash([random(5), random(3)]),
                                            line(a, map(n, 0, 1, b - peakheight2, b + peakheight2), a, ground2 + bottomofcloud);
                                        pop()
                                    }
                                }
                                theight = 100,
                                downshift = 25,
                                minwallframe = random([10, 25]);
                                let t = hbirds;
                                for (; t--; ) {
                                    x = random(25, width - 25),
                                    y = random(25, 300);
                                    let e = .002;
                                    n = noise(x * e, y * e),
                                    push(),
                                    translate(x, y);
                                    for (var r = 1; r <= 25; r += 15)
                                        rotate(random(-1e3, 1e3)),
                                        drawBird(random(1.5, 3));
                                    pop()
                                }
                                if (0 == flatgroundleft || 0 == flatgroundright ? archpresent = random(["aqueduct", "nothing"]) : peakleft > 0 ? archpresent = random(["cabletower", "nothing"]) : archpresent = random(["aqueduct", "bridge", "cabletower", "nothing"]),
                                "aqueduct" == archpresent) {
                                    for (colorset22 = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                    aquoptions = random([1, 2, 2, 2]),
                                    push(),
                                    aquwidth = 5,
                                    bridgewidth = random([5, 10, 15]),
                                    totwidth = 2 * aquwidth + 2 * bridgewidth,
                                    aquheight = -40,
                                    widthmodifier = random([2, 3, 4, 5, 8, 10]),
                                    aquframe = frame,
                                    numaquwidth = (width - 2 * aquframe * widthmodifier) / totwidth,
                                    numaquheight = random([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12]),
                                    translate(aquframe * widthmodifier + aquwidth, ground + peakheight),
                                    e = 0; e < -aquheight * numaquheight; e += -aquheight) {
                                        for (push(),
                                        translate(0, -e),
                                        z = 0; z < totwidth * numaquwidth; z += totwidth)
                                            push(),
                                            translate(z, 0),
                                            drawAqueduct(aquwidth, bridgewidth, aquheight, livepal, colorset22, aquoptions),
                                            pop();
                                        pop()
                                    }
                                    pop()
                                } else if ("bridge" == archpresent)
                                    push(),
                                    bridgeheight = -250,
                                    bridgewidth = 210,
                                    btowerwidth = 10,
                                    translate(90, ground),
                                    drawArchTower(bridgeheight, bridgewidth, btowerwidth, 2.2),
                                    pop();
                                else if ("cabletower" == archpresent) {
                                    push(),
                                    cabletowerwidth = random([5, 10, 15, 25, 40]),
                                    peakleft > 0 ? (cabletowerheight1 = random(300, 400) + 100,
                                    cabletowerheight2 = random([cabletowerheight1, cabletowerheight1 + random(200), cabletowerheight1 + random(200)]) - 100) : (cabletowerheight1 = random(300, 400),
                                    cabletowerheight2 = random([cabletowerheight1, cabletowerheight1 + random(200), cabletowerheight1 + random(200)])),
                                    translate(frame + cabletowerwidth, ground),
                                    push(),
                                    translate(2, -cabletowerheight1 - 13),
                                    drawPerson(3, random([1, 2, 3])),
                                    pop(),
                                    drawTower(cabletowerwidth, 0, cabletowerheight1, 2, 2, livepal);
                                    let e = 4;
                                    for (; e--; )
                                        noFill(),
                                        bezier(cabletowerwidth, -cabletowerheight1, cabletowerwidth + width / 3, -cabletowerheight1 + random(2, 75), cabletowerwidth + width / 2, -cabletowerheight1 + random(2, 75), width - 2 * frame - 3 * cabletowerwidth, -cabletowerheight2);
                                    pop(),
                                    push(),
                                    translate(width - frame - 2 * cabletowerwidth, ground),
                                    drawTower(cabletowerwidth, 0, cabletowerheight2, 2, 2, livepal),
                                    pop()
                                }
                                if (pyramid = random([1, 1, 0, 0, 0, 0]),
                                1 == pyramid) {
                                    let e = random([10, 25, 50, 40, 100, 50])
                                      , t = random([10, 15, 20, 25]);
                                    widthoftop = random([10 * t, 15 * t, 5 * t]),
                                    slopeoptions = random([-5, 1, 0, 0, 0]),
                                    heightoptions = random([1, 2, 2, 3, 1, 2]),
                                    towertypeoptions = random([1, 2, 2, 2]),
                                    widthextender = random([1, 2, 2]);
                                    for (let a = ground - 400; a <= ground + peakheight; a += e) {
                                        pyframe = map(a, ground - 400, ground + peakheight, widthoftop, t);
                                        for (let r = pyframe + frame + flatgroundleft; r <= width - pyframe - frame - flatgroundright - 3 * t; r += t)
                                            1 == heightoptions ? heightset = random(2 * e, 25 + 6 * e) : 2 == heightoptions ? heightset = 3 * e : heightset = e,
                                            1 == towertypeoptions ? towertypee = random([1, 2, 3, 3, 3]) : 2 == towertypeoptions && (towertypee = 3),
                                            push(),
                                            translate(r, a),
                                            drawTower(map(r, pyframe + frame + flatgroundleft, width - pyframe - frame - flatgroundright, t, t * widthextender), slopeoptions, map(r, pyframe + frame + flatgroundleft, width - pyframe - frame - flatgroundright, e, heightset), random(2, 5), towertypee, livepal),
                                            pop()
                                    }
                                } else {
                                    itminwidth = 5,
                                    itmaxwidth = 50;
                                    let e = hbiginnercastles;
                                    for (; e--; )
                                        push(),
                                        x = random(frame + flatgroundleft + minwallframe + itminwidth, width - frame - flatgroundright - minwallframe - itmaxwidth),
                                        n = noise(x * incr, ground),
                                        y = map(n, 0, 1, ground - peakheight, ground + peakheight) + downshift,
                                        translate(x, y),
                                        drawTower(random(itminwidth, itmaxwidth), random([-5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]), random(peakheight, random(theight, random(4 * theight, 5 * theight))), random(2, 5), random([1, 2, 3]), livepal),
                                        pop();
                                    let t = hinnercastles;
                                    for (; t--; )
                                        push(),
                                        x = random(frame + flatgroundleft + minwallframe + itminwidth, width - frame - flatgroundright - minwallframe - itmaxwidth),
                                        n = noise(x * incr, ground),
                                        y = map(n, 0, 1, ground - peakheight, ground + peakheight) + downshift,
                                        translate(x, y),
                                        drawTower(random(itminwidth, itmaxwidth), random([-5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]), random(peakheight, random(theight, random(theight, 3 * theight))), random(2, 5), random([1, 2, 3]), livepal),
                                        pop()
                                }
                                for (wheight = random([50, 100]),
                                wallheight = random([0, 0, 0, 25, 25, 50]),
                                wallwidth = random(xfreqofpeak, 2 * xfreqofpeak),
                                woodentowerheight = random([-50, -200, -50, -50]),
                                guardtowerspresent = random([0, 1, 2, 0, 0]),
                                1 == guardtowerspresent ? (push(),
                                x = frame + flatgroundleft + minwallframe + 2,
                                n = noise(x * incr, ground),
                                y = ground - wallheight / 2,
                                translate(x, y),
                                drawWoodenTower(woodentowerheight, livepal),
                                pop(),
                                push(),
                                x = width - frame - flatgroundright - minwallframe - 7,
                                n = noise(x * incr, ground),
                                y = ground - wallheight / 2,
                                translate(x, y),
                                drawWoodenTower(woodentowerheight, livepal),
                                pop()) : 2 == guardtowerspresent && (push(),
                                x = random(frame + flatgroundleft + minwallframe + 2, width - frame - flatgroundright - minwallframe - 7),
                                n = noise(x * incr, ground),
                                y = ground - wallheight / 2,
                                translate(x, y),
                                drawWoodenTower(random(-350, -475), livepal),
                                pop()),
                                plainwall = random([1, 1, 2, 1, 1, 1, 1, 1]),
                                a = frame + flatgroundleft + minwallframe; a < width - frame - flatgroundright - minwallframe; a += xfreqofpeak)
                                    push(),
                                    x = a,
                                    n = noise(x * incr, ground),
                                    y = map(n, 0, 1, ground - peakheight, ground + peakheight),
                                    drawingContext.setLineDash([random(5), random(3)]),
                                    beginShape(),
                                    1 == plainwall ? fill("antiquewhite") : (colorset = random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
                                    fill(palettes[livepal][colorset])),
                                    vertex(x, y),
                                    vertex(x, ground - wallheight),
                                    x = a + wallwidth,
                                    n = noise(x * incr, ground),
                                    y = map(n, 0, 1, ground - peakheight, ground + peakheight),
                                    vertex(x, ground - wallheight),
                                    vertex(x, y),
                                    endShape(),
                                    pop();
                                for (a = 0; a < 2 * wallheight; a += 4)
                                    push(),
                                    drawingContext.setLineDash([random(25), random(23)]),
                                    strokeWeight(1),
                                    line(frame + flatgroundleft + minwallframe, ground - wallheight + a, width - frame - flatgroundright - minwallframe, ground - wallheight + a),
                                    pop();
                                for (a = frame + flatgroundleft + minwallframe; a < width - frame - flatgroundright - minwallframe; a += xfreqofpeak)
                                    push(),
                                    x = a,
                                    n = noise(x * incr, ground),
                                    y = map(n, 0, 1, ground - peakheight, ground + peakheight),
                                    strokeWeight(3),
                                    strokeCap(SQUARE),
                                    beginShape(),
                                    fill("antiquewhite"),
                                    vertex(x, ground - wallheight),
                                    x = a + wallwidth,
                                    n = noise(x * incr, ground),
                                    y = map(n, 0, 1, ground - peakheight, ground + peakheight),
                                    vertex(x, ground - wallheight),
                                    endShape(),
                                    pop();
                                if (svminwidth = 5,
                                svmaxwidth = 35,
                                villagepresent = random([0, 1, 1, 1, 1, 1]),
                                1 == villagepresent) {
                                    let e = 75;
                                    for (; e--; )
                                        push(),
                                        x = random(frame + flatgroundleft + minwallframe, width - frame - flatgroundright - minwallframe - 15),
                                        n = noise(x * incr, ground),
                                        y = map(n, 0, 1, ground - peakheight, ground + peakheight) + downshift,
                                        translate(x, y),
                                        drawTower(random(svminwidth, svmaxwidth), 0, random(25, 45), random(2, 5), random([3]), livepal),
                                        pop()
                                }
                                if (svminwidth = 5,
                                svmaxwidth = 35,
                                leftvillagevillagepresent = random([0, 1, 1, 1, 2, 2, 3]),
                                1 == leftvillagevillagepresent) {
                                    let e = 5;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundleft ? x = -300 : x = random(frame, frame + flatgroundleft - svmaxwidth),
                                        n = noise(x * incr, ground),
                                        y = ground + downshift - peakleft,
                                        translate(x, y),
                                        drawTower(random(svminwidth, svmaxwidth), 0, random(25, 45), random(2, 5), random([3]), livepal),
                                        pop()
                                } else if (2 == leftvillagevillagepresent) {
                                    let e = 5;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundleft ? x = -1300 : x = random(frame, frame + flatgroundleft - 3),
                                        n = noise(x * incr, ground),
                                        y = ground - peakleft,
                                        translate(x, y - 6),
                                        drawPerson(2, random([1, 2, 3])),
                                        pop()
                                } else if (3 == leftvillagevillagepresent) {
                                    let e = hltree;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundleft ? x = -1300 : x = random(frame, frame + flatgroundleft - 10),
                                        treeheight = random(5, random(5, 50)),
                                        y = ground - peakleft - treeheight - treeheight / 3,
                                        push(),
                                        translate(x, y),
                                        drawTree(treeheight),
                                        pop()
                                }
                                if (svminwidth = 5,
                                svmaxwidth = 35,
                                rightvillagevillagepresent = random([0, 1, 1, 1, 2, 2, 3]),
                                1 == rightvillagevillagepresent) {
                                    let e = 5;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundright ? x = -1300 : x = random(width - frame - flatgroundright, width - frame - svmaxwidth),
                                        n = noise(x * incr, ground),
                                        y = ground + downshift,
                                        translate(x, y),
                                        drawTower(random(svminwidth, svmaxwidth), 0, random(25, 45), random(2, 5), random([3]), livepal),
                                        pop()
                                } else if (2 == rightvillagevillagepresent) {
                                    let e = 5;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundright ? x = -1300 : x = random(width - frame - flatgroundright, width - frame - 3),
                                        n = noise(x * incr, ground),
                                        y = ground,
                                        translate(x, y - 6),
                                        drawPerson(2, random([1, 2, 3])),
                                        pop()
                                } else if (3 == rightvillagevillagepresent) {
                                    let e = hrtree;
                                    for (; e--; )
                                        push(),
                                        0 == flatgroundright ? x = -1300 : x = random(width - frame - flatgroundright, width - frame - 10),
                                        treeheight = random(5, random(5, 50)),
                                        y = ground - treeheight - treeheight / 3,
                                        push(),
                                        translate(x, y),
                                        drawTree(treeheight),
                                        pop()
                                }
                                for (noFill(),
                                1 == colororplain ? stroke(palettes[livepal][4]) : stroke("antiquewhite"),
                                b = ground + 1; b < ground + 500; b += .5) {
                                    for (beginShape(),
                                    a = frame; a < width - frame + 10; a += xfreqofpeak)
                                        n = noise(a * incr, ground),
                                        a < frame + flatgroundleft ? vertex(a, b - peakleft) : a > width - frame - flatgroundright ? vertex(a, b) : vertex(a, map(n, 0, 1, b - peakheight, b + peakheight));
                                    endShape()
                                }
                                for (noFill(),
                                stroke("black"),
                                peakheight > 0 && 0 == peakleft ? morelines = random([5, 55]) : morelines = 5,
                                b = ground; b < ground + morelines; b += 5) {
                                    for (peakheight > 0 && 0 == peakleft & 55 == morelines ? strokeWeight(map(b, ground, ground + morelines, 2, -2)) : strokeWeight(1),
                                    beginShape(),
                                    a = frame; a < width - frame + 10; a += xfreqofpeak)
                                        peakheight > 0 && 0 == peakleft ? n = map(b, ground, ground + 155, noise(a * incr, ground), 0) : n = noise(a * incr, ground),
                                        a < frame + flatgroundleft ? vertex(a, b - peakleft) : a > width - frame - flatgroundright ? vertex(a, b) : vertex(a, map(n, 0, 1, b - peakheight, b + peakheight));
                                    endShape()
                                }
                                if (1 == texture) {
                                    padfactor = 1e3;
                                    let e = 3e4;
                                    for (; e--; )
                                        x = random(width),
                                        y = random(height),
                                        push(),
                                        strokeWeight(.2),
                                        stroke(50, 50, random(55, 95), random(1, 15)),
                                        noFill(),
                                        bezier(random(-padfactor, width + padfactor), random(-padfactor, height + padfactor), random(-padfactor, width + padfactor), random(-padfactor, height + padfactor), random(-padfactor, width + padfactor), random(-padfactor, height + padfactor), random(-padfactor, width + padfactor), random(-padfactor, height + padfactor)),
                                        pop()
                                }
                                push();
                                let o = int(random(0, 19))
                                  , i = int(random(0, 18));
                                composition = random([1, 2, 3, 4, 5]),
                                1 == composition ? liveepocharray = 2 : 2 == composition ? liveepocharray = 3 : 3 == composition ? liveepocharray = 1 : 4 == composition ? liveepocharray = 4 : 5 == composition && (liveepocharray = 0),
                                liveepochpick = random([0, 1, 2]),
                                0 == livepal ? livepaldescarray = 0 : 1 == livepal ? livepaldescarray = 1 : 2 == livepal ? livepaldescarray = 2 : 3 == livepal ? livepaldescarray = 3 : 4 == livepal ? livepaldescarray = 4 : 5 == livepal ? livepaldescarray = 5 : 6 == livepal ? livepaldescarray = 6 : 7 == livepal && (livepaldescarray = 7),
                                livepaldespick = random([0, 1]),
                                castleset = hbiginnercastles + hinnercastles,
                                birdwordset = random([1, 2]),
                                1 == birdwordset ? birdword = " If you look closely, you might even be able to spot " + hbirds + " tiny birds." : birdword = " If you look closely, you might even be able to spot " + castleset + " castles.",
                                herotext = random(["our hero", "our heroine", "the archer", "the knight", "the wizard", "the squire", "the jester", "the protagonist", "the farmer"]),
                                teleporttext = random(["BOOM! ...", "SHAPOW! ...", "KABLONK! ...", "POW! ...", "THUMP! ...", "CRUNCH! ...", "CRACK! ..."]),
                                excitementtext = random(["'Whoa!, ", "'Wow!, ", "'By golly!, ", "'Jee wiz!, ", "'Woohoo!, "]),
                                herostatus = random([" resting", " recovering", " celebrating", " laughing", " making friends", " celebrating"]),
                                introtext = random(["...and suddenly a great voice exclaimed... Herein lies the Kingdom of ", "..." + herotext + " then looked upon the Kingdom of ", "..." + herotext + " paused and began reading...Welcome to the Kingdom of ", "We find " + herotext + herostatus + " in the Kingdom of ", teleporttext + herotext + " was suddenly teleported to the Kingdom of ", excitementtext + herotext + " exclaimed upon seeing the Kingdom of ", "..." + herotext + " ran and ran until they found the Kingdom of "]);
                                let h = introtext + nounarray[0][o] + " where the people " + livepalarray[livepaldescarray][livepaldespick] + ". The people here were known for " + verbarray[0][i] + ". " + epocharray[liveepocharray][liveepochpick] + birdword;
                                booknumber = random(["Book I", "Book II", "Book III", "Book IV", "Book V"]),
                                push(),
                                textStyle(ITALIC),
                                strokeWeight(1),
                                textFont("Georgia"),
                                fill("#0e0e0e"),
                                textSize(8),
                                textAlign(CENTER),
                                rectMode(CENTER),
                                text(h, width / 2, height - 50, width - 100),
                                text(booknumber + ", Page " + int(random(100)), width / 2, 15, width - 140),
                                pop(),
                                pop()
                            }
                        </script>
                    </div>
                    <p id="text01">
                        <a href="http://genlight.art">Made by Adam</a>
                        .
                    </p>
                </div>
            </div>
        </div>
        <script>
            (function() {
                var on = addEventListener
                  , $ = function(q) {
                    return document.querySelector(q)
                }
                  , $$ = function(q) {
                    return document.querySelectorAll(q)
                }
                  , $body = document.body
                  , $inner = $('.inner')
                  , client = (function() {
                    var o = {
                        browser: 'other',
                        browserVersion: 0,
                        os: 'other',
                        osVersion: 0,
                        mobile: false,
                        canUse: null,
                        flags: {
                            lsdUnits: false,
                        },
                    }, ua = navigator.userAgent, a, i;
                    a = [['firefox', /Firefox\/([0-9\.]+)/], ['edge', /Edge\/([0-9\.]+)/], ['safari', /Version\/([0-9\.]+).+Safari/], ['chrome', /Chrome\/([0-9\.]+)/], ['chrome', /CriOS\/([0-9\.]+)/], ['ie', /Trident\/.+rv:([0-9]+)/]];
                    for (i = 0; i < a.length; i++) {
                        if (ua.match(a[i][1])) {
                            o.browser = a[i][0];
                            o.browserVersion = parseFloat(RegExp.$1);
                            break;
                        }
                    }
                    a = [['ios', /([0-9_]+) like Mac OS X/, function(v) {
                        return v.replace('_', '.').replace('_', '');
                    }
                    ], ['ios', /CPU like Mac OS X/, function(v) {
                        return 0
                    }
                    ], ['ios', /iPad; CPU/, function(v) {
                        return 0
                    }
                    ], ['android', /Android ([0-9\.]+)/, null], ['mac', /Macintosh.+Mac OS X ([0-9_]+)/, function(v) {
                        return v.replace('_', '.').replace('_', '');
                    }
                    ], ['windows', /Windows NT ([0-9\.]+)/, null], ['undefined', /Undefined/, null], ];
                    for (i = 0; i < a.length; i++) {
                        if (ua.match(a[i][1])) {
                            o.os = a[i][0];
                            o.osVersion = parseFloat(a[i][2] ? (a[i][2])(RegExp.$1) : RegExp.$1);
                            break;
                        }
                    }
                    if (o.os == 'mac' && ('ontouchstart'in window) && ((screen.width == 1024 && screen.height == 1366) || (screen.width == 834 && screen.height == 1112) || (screen.width == 810 && screen.height == 1080) || (screen.width == 768 && screen.height == 1024)))
                        o.os = 'ios';
                    o.mobile = (o.os == 'android' || o.os == 'ios');
                    var _canUse = document.createElement('div');
                    o.canUse = function(property, value) {
                        var style;
                        style = _canUse.style;
                        if (!(property in style))
                            return false;
                        if (typeof value !== 'undefined') {
                            style[property] = value;
                            if (style[property] == '')
                                return false;
                        }
                        return true;
                    }
                    ;
                    o.flags.lsdUnits = o.canUse('width', '100dvw');
                    return o;
                }())
                  , trigger = function(t) {
                    dispatchEvent(new Event(t));
                }
                  , cssRules = function(selectorText) {
                    var ss = document.styleSheets, a = [], f = function(s) {
                        var r = s.cssRules, i;
                        for (i = 0; i < r.length; i++) {
                            if (r[i]instanceof CSSMediaRule && matchMedia(r[i].conditionText).matches)
                                (f)(r[i]);
                            else if (r[i]instanceof CSSStyleRule && r[i].selectorText == selectorText)
                                a.push(r[i]);
                        }
                    }, x, i;
                    for (i = 0; i < ss.length; i++)
                        f(ss[i]);
                    return a;
                }
                  , thisHash = function() {
                    var h = location.hash ? location.hash.substring(1) : null, a;
                    if (!h)
                        return null;
                    if (h.match(/\?/)) {
                        a = h.split('?');
                        h = a[0];
                        history.replaceState(undefined, undefined, '#' + h);
                        window.location.search = a[1];
                    }
                    if (h.length > 0 && !h.match(/^[a-zA-Z]/))
                        h = 'x' + h;
                    if (typeof h == 'string')
                        h = h.toLowerCase();
                    return h;
                }
                  , scrollToElement = function(e, style, duration) {
                    var y, cy, dy, start, easing, offset, f;
                    if (!e)
                        y = 0;
                    else {
                        offset = (e.dataset.scrollOffset ? parseInt(e.dataset.scrollOffset) : 0) * parseFloat(getComputedStyle(document.documentElement).fontSize);
                        switch (e.dataset.scrollBehavior ? e.dataset.scrollBehavior : 'default') {
                        case 'default':
                        default:
                            y = e.offsetTop + offset;
                            break;
                        case 'center':
                            if (e.offsetHeight < window.innerHeight)
                                y = e.offsetTop - ((window.innerHeight - e.offsetHeight) / 2) + offset;
                            else
                                y = e.offsetTop - offset;
                            break;
                        case 'previous':
                            if (e.previousElementSibling)
                                y = e.previousElementSibling.offsetTop + e.previousElementSibling.offsetHeight + offset;
                            else
                                y = e.offsetTop + offset;
                            break;
                        }
                    }
                    if (!style)
                        style = 'smooth';
                    if (!duration)
                        duration = 750;
                    if (style == 'instant') {
                        window.scrollTo(0, y);
                        return;
                    }
                    start = Date.now();
                    cy = window.scrollY;
                    dy = y - cy;
                    switch (style) {
                    case 'linear':
                        easing = function(t) {
                            return t
                        }
                        ;
                        break;
                    case 'smooth':
                        easing = function(t) {
                            return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
                        }
                        ;
                        break;
                    }
                    f = function() {
                        var t = Date.now() - start;
                        if (t >= duration)
                            window.scroll(0, y);
                        else {
                            window.scroll(0, cy + (dy * easing(t / duration)));
                            requestAnimationFrame(f);
                        }
                    }
                    ;
                    f();
                }
                  , scrollToTop = function() {
                    scrollToElement(null);
                }
                  , loadElements = function(parent) {
                    var a, e, x, i;
                    a = parent.querySelectorAll('iframe[data-src]:not([data-src=""])');
                    for (i = 0; i < a.length; i++) {
                        a[i].contentWindow.location.replace(a[i].dataset.src);
                        a[i].dataset.initialSrc = a[i].dataset.src;
                        a[i].dataset.src = '';
                    }
                    a = parent.querySelectorAll('video[autoplay]');
                    for (i = 0; i < a.length; i++) {
                        if (a[i].paused)
                            a[i].play();
                    }
                    e = parent.querySelector('[data-autofocus="1"]');
                    x = e ? e.tagName : null;
                    switch (x) {
                    case 'FORM':
                        e = e.querySelector('.field input, .field select, .field textarea');
                        if (e)
                            e.focus();
                        break;
                    default:
                        break;
                    }
                }
                  , unloadElements = function(parent) {
                    var a, e, x, i;
                    a = parent.querySelectorAll('iframe[data-src=""]');
                    for (i = 0; i < a.length; i++) {
                        if (a[i].dataset.srcUnload === '0')
                            continue;
                        if ('initialSrc'in a[i].dataset)
                            a[i].dataset.src = a[i].dataset.initialSrc;
                        else
                            a[i].dataset.src = a[i].src;
                        a[i].contentWindow.location.replace('about:blank');
                    }
                    a = parent.querySelectorAll('video');
                    for (i = 0; i < a.length; i++) {
                        if (!a[i].paused)
                            a[i].pause();
                    }
                    e = $(':focus');
                    if (e)
                        e.blur();
                };
                window._scrollToTop = scrollToTop;
                var thisURL = function() {
                    return window.location.href.replace(window.location.search, '').replace(/#$/, '');
                };
                var getVar = function(name) {
                    var a = window.location.search.substring(1).split('&'), b, k;
                    for (k in a) {
                        b = a[k].split('=');
                        if (b[0] == name)
                            return b[1];
                    }
                    return null;
                };
                var errors = {
                    handle: function(handler) {
                        window.onerror = function(message, url, line, column, error) {
                            (handler)(error.message);
                            return true;
                        }
                        ;
                    },
                    unhandle: function() {
                        window.onerror = null;
                    }
                };
                loadElements(document.body);
                var style, sheet, rule;
                style = document.createElement('style');
                style.appendChild(document.createTextNode(''));
                document.head.appendChild(style);
                sheet = style.sheet;
                if (client.mobile) {
                    (function() {
                        if (client.flags.lsdUnits) {
                            document.documentElement.style.setProperty('--viewport-height', '100dvh');
                            document.documentElement.style.setProperty('--background-height', '100lvh');
                        } else {
                            var f = function() {
                                document.documentElement.style.setProperty('--viewport-height', window.innerHeight + 'px');
                                document.documentElement.style.setProperty('--background-height', (window.innerHeight + 250) + 'px');
                            };
                            on('load', f);
                            on('resize', f);
                            on('orientationchange', function() {
                                setTimeout(function() {
                                    (f)();
                                }, 100);
                            });
                        }
                    }
                    )();
                }
                if (client.os == 'android') {
                    (function() {
                        sheet.insertRule('body::after { }', 0);
                        rule = sheet.cssRules[0];
                        var f = function() {
                            rule.style.cssText = 'height: ' + (Math.max(screen.width, screen.height)) + 'px';
                        };
                        on('load', f);
                        on('orientationchange', f);
                        on('touchmove', f);
                    }
                    )();
                    $body.classList.add('is-touch');
                } else if (client.os == 'ios') {
                    if (client.osVersion <= 11)
                        (function() {
                            sheet.insertRule('body::after { }', 0);
                            rule = sheet.cssRules[0];
                            rule.style.cssText = '-webkit-transform: scale(1.0)';
                        }
                        )();
                    if (client.osVersion <= 11)
                        (function() {
                            sheet.insertRule('body.ios-focus-fix::before { }', 0);
                            rule = sheet.cssRules[0];
                            rule.style.cssText = 'height: calc(100% + 60px)';
                            on('focus', function(event) {
                                $body.classList.add('ios-focus-fix');
                            }, true);
                            on('blur', function(event) {
                                $body.classList.remove('ios-focus-fix');
                            }, true);
                        }
                        )();
                    $body.classList.add('is-touch');
                }
            }
            )();
        </script>
    </body>
</html>
